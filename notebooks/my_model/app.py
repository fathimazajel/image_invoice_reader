# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1piJ2r2r8pJlXbJM2lZKkrOFcklf_9QTy
"""

from flask import Flask, request, jsonify
from transformers import DistilBertForSequenceClassification, DistilBertTokenizerFast
import pytesseract
from PIL import Image
import io
import os

os.environ["TOKENIZERS_PARALLELISM"] = "false"


app = Flask(__name__)

# Load Model and Tokenizer
model = DistilBertForSequenceClassification.from_pretrained(".")
tokenizer = DistilBertTokenizerFast.from_pretrained(".")


@app.route("/predict", methods=["POST"])
def predict():
    # Extract image from the request
    image_file = request.files['image']
    image = Image.open(io.BytesIO(image_file.read()))

    # Use pytesseract to extract text
    extracted_text = pytesseract.image_to_string(image)

     # Tokenize the text and predict
    inputs = tokenizer(extracted_text, return_tensors="pt", truncation=True, padding=True)
    outputs = model(**inputs)
    predicted_class_indices = outputs.logits.argmax(dim=-1).tolist()

    # Map predicted labels to class names
    label_map = {0: "company", 1: "date", 2: "address", 3: "total", 4: "other"}
    predicted_class_names = [label_map[i] for i in predicted_class_indices]

    # Debug: Print the segment with its predicted label
    for segment, label in zip(extracted_text.split('\n'), predicted_class_names):
        print(segment, "-", label)

    # Format the result
    result = {
        "Company Name": next((segment for segment, label in zip(extracted_text.split('\n'), predicted_class_names) if label == "company"), None),
        "Amount": next((segment for segment, label in zip(extracted_text.split('\n'), predicted_class_names) if label == "total"), None),
        "Address": next((segment for segment, label in zip(extracted_text.split('\n'), predicted_class_names) if label == "address"), None),
        "Date": next((segment for segment, label in zip(extracted_text.split('\n'), predicted_class_names) if label == "date"), None)
    }

    return jsonify(result)

if __name__ == "__main__":
    app.run(debug=True)